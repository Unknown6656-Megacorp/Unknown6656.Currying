////////////////////////////////////////////////////// AUTOGENERATED //////////////////////////////////////////////////////
// WARNING: All code changes to this file will be lost upon regeneration.                                                //
// Autogenerated on 2022-02-05 13:01:24:378830                                                                           //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System.Runtime.CompilerServices;
using System;


namespace Unknown6656.Common;



/// <summary>
/// Contains a set of extension methods for method currying and partial method application.
/// </summary>
public static unsafe class Currying
{
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0>(this Action<T0> f, T0 arg0) =>
        () => f(arg0);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1> Curry<T0, T1>(this Func<T0, T1> f, T0 arg0) =>
        () => f(arg0);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0>(delegate*<T0> f, T0 arg0) =>
        () => f(arg0);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1> Curry<T0, T1>(delegate*<T0, T1> f, T0 arg0) =>
        () => f(arg0);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1> Curry<T0, T1>(this Action<T0, T1> f, T0 arg0) =>
        (arg1) => f(arg0, arg1);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2> Curry<T0, T1, T2>(this Func<T0, T1, T2> f, T0 arg0) =>
        (arg1) => f(arg0, arg1);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1> Curry<T0, T1>(delegate*<T0, T1> f, T0 arg0) =>
        (arg1) => f(arg0, arg1);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2> Curry<T0, T1, T2>(delegate*<T0, T1, T2> f, T0 arg0) =>
        (arg1) => f(arg0, arg1);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1>(this Action<T0, T1> f, T0 arg0, T1 arg1) =>
        () => f(arg0, arg1);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2> Curry<T0, T1, T2>(this Func<T0, T1, T2> f, T0 arg0, T1 arg1) =>
        () => f(arg0, arg1);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1>(delegate*<T0, T1> f, T0 arg0, T1 arg1) =>
        () => f(arg0, arg1);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2> Curry<T0, T1, T2>(delegate*<T0, T1, T2> f, T0 arg0, T1 arg1) =>
        () => f(arg0, arg1);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2> Curry<T0, T1, T2>(this Action<T0, T1, T2> f, T0 arg0) =>
        (arg1, arg2) => f(arg0, arg1, arg2);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3> Curry<T0, T1, T2, T3>(this Func<T0, T1, T2, T3> f, T0 arg0) =>
        (arg1, arg2) => f(arg0, arg1, arg2);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2> Curry<T0, T1, T2>(delegate*<T0, T1, T2> f, T0 arg0) =>
        (arg1, arg2) => f(arg0, arg1, arg2);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3> Curry<T0, T1, T2, T3>(delegate*<T0, T1, T2, T3> f, T0 arg0) =>
        (arg1, arg2) => f(arg0, arg1, arg2);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2> Curry<T0, T1, T2>(this Action<T0, T1, T2> f, T0 arg0, T1 arg1) =>
        (arg2) => f(arg0, arg1, arg2);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3> Curry<T0, T1, T2, T3>(this Func<T0, T1, T2, T3> f, T0 arg0, T1 arg1) =>
        (arg2) => f(arg0, arg1, arg2);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2> Curry<T0, T1, T2>(delegate*<T0, T1, T2> f, T0 arg0, T1 arg1) =>
        (arg2) => f(arg0, arg1, arg2);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3> Curry<T0, T1, T2, T3>(delegate*<T0, T1, T2, T3> f, T0 arg0, T1 arg1) =>
        (arg2) => f(arg0, arg1, arg2);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2>(this Action<T0, T1, T2> f, T0 arg0, T1 arg1, T2 arg2) =>
        () => f(arg0, arg1, arg2);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3> Curry<T0, T1, T2, T3>(this Func<T0, T1, T2, T3> f, T0 arg0, T1 arg1, T2 arg2) =>
        () => f(arg0, arg1, arg2);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2>(delegate*<T0, T1, T2> f, T0 arg0, T1 arg1, T2 arg2) =>
        () => f(arg0, arg1, arg2);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3> Curry<T0, T1, T2, T3>(delegate*<T0, T1, T2, T3> f, T0 arg0, T1 arg1, T2 arg2) =>
        () => f(arg0, arg1, arg2);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3> Curry<T0, T1, T2, T3>(this Action<T0, T1, T2, T3> f, T0 arg0) =>
        (arg1, arg2, arg3) => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4> Curry<T0, T1, T2, T3, T4>(this Func<T0, T1, T2, T3, T4> f, T0 arg0) =>
        (arg1, arg2, arg3) => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3> Curry<T0, T1, T2, T3>(delegate*<T0, T1, T2, T3> f, T0 arg0) =>
        (arg1, arg2, arg3) => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4> Curry<T0, T1, T2, T3, T4>(delegate*<T0, T1, T2, T3, T4> f, T0 arg0) =>
        (arg1, arg2, arg3) => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3> Curry<T0, T1, T2, T3>(this Action<T0, T1, T2, T3> f, T0 arg0, T1 arg1) =>
        (arg2, arg3) => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4> Curry<T0, T1, T2, T3, T4>(this Func<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1) =>
        (arg2, arg3) => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3> Curry<T0, T1, T2, T3>(delegate*<T0, T1, T2, T3> f, T0 arg0, T1 arg1) =>
        (arg2, arg3) => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4> Curry<T0, T1, T2, T3, T4>(delegate*<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1) =>
        (arg2, arg3) => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3> Curry<T0, T1, T2, T3>(this Action<T0, T1, T2, T3> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3) => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4> Curry<T0, T1, T2, T3, T4>(this Func<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3) => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3> Curry<T0, T1, T2, T3>(delegate*<T0, T1, T2, T3> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3) => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4> Curry<T0, T1, T2, T3, T4>(delegate*<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3) => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3>(this Action<T0, T1, T2, T3> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        () => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4> Curry<T0, T1, T2, T3, T4>(this Func<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        () => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3>(delegate*<T0, T1, T2, T3> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        () => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4> Curry<T0, T1, T2, T3, T4>(delegate*<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        () => f(arg0, arg1, arg2, arg3);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4> Curry<T0, T1, T2, T3, T4>(this Action<T0, T1, T2, T3, T4> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5> Curry<T0, T1, T2, T3, T4, T5>(this Func<T0, T1, T2, T3, T4, T5> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4> Curry<T0, T1, T2, T3, T4>(delegate*<T0, T1, T2, T3, T4> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5> Curry<T0, T1, T2, T3, T4, T5>(delegate*<T0, T1, T2, T3, T4, T5> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4> Curry<T0, T1, T2, T3, T4>(this Action<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5> Curry<T0, T1, T2, T3, T4, T5>(this Func<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4> Curry<T0, T1, T2, T3, T4>(delegate*<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5> Curry<T0, T1, T2, T3, T4, T5>(delegate*<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4> Curry<T0, T1, T2, T3, T4>(this Action<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5> Curry<T0, T1, T2, T3, T4, T5>(this Func<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4> Curry<T0, T1, T2, T3, T4>(delegate*<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5> Curry<T0, T1, T2, T3, T4, T5>(delegate*<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4> Curry<T0, T1, T2, T3, T4>(this Action<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5> Curry<T0, T1, T2, T3, T4, T5>(this Func<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4> Curry<T0, T1, T2, T3, T4>(delegate*<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5> Curry<T0, T1, T2, T3, T4, T5>(delegate*<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4) => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4>(this Action<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        () => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5> Curry<T0, T1, T2, T3, T4, T5>(this Func<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        () => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4>(delegate*<T0, T1, T2, T3, T4> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        () => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5> Curry<T0, T1, T2, T3, T4, T5>(delegate*<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        () => f(arg0, arg1, arg2, arg3, arg4);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5> Curry<T0, T1, T2, T3, T4, T5>(this Action<T0, T1, T2, T3, T4, T5> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(this Func<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5> Curry<T0, T1, T2, T3, T4, T5>(delegate*<T0, T1, T2, T3, T4, T5> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5> Curry<T0, T1, T2, T3, T4, T5>(this Action<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(this Func<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5> Curry<T0, T1, T2, T3, T4, T5>(delegate*<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5> Curry<T0, T1, T2, T3, T4, T5>(this Action<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(this Func<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5> Curry<T0, T1, T2, T3, T4, T5>(delegate*<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5> Curry<T0, T1, T2, T3, T4, T5>(this Action<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(this Func<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5> Curry<T0, T1, T2, T3, T4, T5>(delegate*<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5> Curry<T0, T1, T2, T3, T4, T5>(this Action<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(this Func<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5> Curry<T0, T1, T2, T3, T4, T5>(delegate*<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5) => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5>(this Action<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6> Curry<T0, T1, T2, T3, T4, T5, T6>(this Func<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5>(delegate*<T0, T1, T2, T3, T4, T5> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6> Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(this Action<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Func<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(this Action<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Func<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(this Action<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Func<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(this Action<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Func<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(this Action<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Func<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6> Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6> Curry<T0, T1, T2, T3, T4, T5, T6>(this Action<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Func<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6> Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6>(this Action<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Func<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6>(delegate*<T0, T1, T2, T3, T4, T5, T6> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Action<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Action<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Action<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Action<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Action<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Action<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Action<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7> Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7>(this Action<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8, T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T9> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8, T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T9, T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T10> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8, T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T9, T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T10, T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T11> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8, T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T9, T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T10, T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T11, T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11, arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        (arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        (arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T12> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        (arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        (arg12) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8, T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T9, T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T10, T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T11, T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11, arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        (arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        (arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T12, T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        (arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        (arg12, arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        (arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        (arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T13> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        (arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        (arg13) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The parameter no. 13 to be applied to the given function.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The parameter no. 13 to be applied to the given function.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The parameter no. 13 to be applied to the given function.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The parameter no. 13 to be applied to the given function.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0) =>
        (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1) =>
        (arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2) =>
        (arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        (arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        (arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T6, T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        (arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T7, T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T7, T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        (arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T8, T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T8, T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        (arg8, arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T9, T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T9, T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        (arg9, arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T10, T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T10, T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        (arg10, arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T11, T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T11, T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        (arg11, arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        (arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        (arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T12, T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        (arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T12, T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        (arg12, arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        (arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        (arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T13, T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        (arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T13, T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        (arg13, arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The parameter no. 13 to be applied to the given function.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
        (arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The parameter no. 13 to be applied to the given function.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
        (arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The parameter no. 13 to be applied to the given function.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<T14> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
        (arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The parameter no. 13 to be applied to the given function.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T14, T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
        (arg14) => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The parameter no. 13 to be applied to the given function.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="arg14">The parameter no. 14 to be applied to the given function.</param>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The parameter no. 13 to be applied to the given function.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="arg14">The parameter no. 14 to be applied to the given function.</param>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The parameter no. 13 to be applied to the given function.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="arg14">The parameter no. 14 to be applied to the given function.</param>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
    /// <summary>
    /// Partially applies the given parameters to the given function and returns the partially applied function.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The parameter no. 0 to be applied to the given function.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The parameter no. 1 to be applied to the given function.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The parameter no. 2 to be applied to the given function.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The parameter no. 3 to be applied to the given function.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The parameter no. 4 to be applied to the given function.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The parameter no. 5 to be applied to the given function.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The parameter no. 6 to be applied to the given function.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The parameter no. 7 to be applied to the given function.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The parameter no. 8 to be applied to the given function.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The parameter no. 9 to be applied to the given function.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The parameter no. 10 to be applied to the given function.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The parameter no. 11 to be applied to the given function.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The parameter no. 12 to be applied to the given function.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The parameter no. 13 to be applied to the given function.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="arg14">The parameter no. 14 to be applied to the given function.</param>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="f">The function to be partially applied.</param>
    /// <returns>The partially applied function.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T15> Curry<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> f, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) =>
        () => f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
}
